/**
 * Generated by orval v7.6.0 üç∫
 * Do not edit manually.
 * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
 * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∫ –∑–∞–ø—Ä–æ—Å–∞–º
 * OpenAPI spec version: 1.0
 */
import type {
  CreateProductDto,
  Product,
  ProductFindAllParams,
  UpdateProductDto,
} from "./models";

import { customInstance } from "./http-client";
import type { BodyType } from "./http-client";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Get all products
 */
export const productFindAll = (
  params: ProductFindAllParams,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Product[]>(
    { url: `/api/products`, method: "GET", params },
    options,
  );
};
/**
 * @summary Create a new product
 */
export const productCreate = (
  createProductDto: BodyType<CreateProductDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  const formData = new FormData();
  formData.append("name", JSON.stringify(createProductDto.name));
  formData.append("description", JSON.stringify(createProductDto.description));
  formData.append("price", JSON.stringify(createProductDto.price));
  if (createProductDto.discount !== undefined) {
    formData.append("discount", JSON.stringify(createProductDto.discount));
  }
  formData.append("sku", JSON.stringify(createProductDto.sku));
  if (createProductDto.image !== undefined) {
    formData.append("image", createProductDto.image);
  }

  return customInstance<Product>(
    {
      url: `/api/products`,
      method: "POST",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options,
  );
};
/**
 * @summary Get a single product by ID
 */
export const productFindOne = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Product>(
    { url: `/api/products/${id}`, method: "GET" },
    options,
  );
};
/**
 * @summary Update an existing product
 */
export const productUpdate = (
  id: number,
  updateProductDto: BodyType<UpdateProductDto>,
  options?: SecondParameter<typeof customInstance>,
) => {
  const formData = new FormData();
  if (updateProductDto.name !== undefined) {
    formData.append("name", JSON.stringify(updateProductDto.name));
  }
  if (updateProductDto.description !== undefined) {
    formData.append(
      "description",
      JSON.stringify(updateProductDto.description),
    );
  }
  if (updateProductDto.price !== undefined) {
    formData.append("price", JSON.stringify(updateProductDto.price));
  }
  if (updateProductDto.discount !== undefined) {
    formData.append("discount", JSON.stringify(updateProductDto.discount));
  }
  if (updateProductDto.sku !== undefined) {
    formData.append("sku", JSON.stringify(updateProductDto.sku));
  }
  if (updateProductDto.image !== undefined) {
    formData.append("image", updateProductDto.image);
  }

  return customInstance<Product>(
    {
      url: `/api/products/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "multipart/form-data" },
      data: formData,
    },
    options,
  );
};
/**
 * @summary Delete a product by ID
 */
export const productRemove = (
  id: number,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Product>(
    { url: `/api/products/${id}`, method: "DELETE" },
    options,
  );
};
export type ProductFindAllResult = NonNullable<
  Awaited<ReturnType<typeof productFindAll>>
>;
export type ProductCreateResult = NonNullable<
  Awaited<ReturnType<typeof productCreate>>
>;
export type ProductFindOneResult = NonNullable<
  Awaited<ReturnType<typeof productFindOne>>
>;
export type ProductUpdateResult = NonNullable<
  Awaited<ReturnType<typeof productUpdate>>
>;
export type ProductRemoveResult = NonNullable<
  Awaited<ReturnType<typeof productRemove>>
>;
